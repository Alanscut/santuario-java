<?xml version="1.0"?>

<!-- This file is intended for ANT, a Java based build tool.
     ANT is availale from http://jakarta.apache.org/ant/index.html

     This build file is intended to build the org.apache.xml.security package,
     available from http://www.xmlsecurity.org/src/ and
                    http://xml.apache.org/

-->

<project name="The org.apache.xml.security Package" default="usage" basedir=".">

  <target name="usage" >
    <echo message=""/>
    <echo message=""/>
    <echo message="${Name} Build instructions"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   compile         --> compiles everything"/>
    <echo message="   compile.library --> compiles the source code"/>
    <echo message="   compile.samples --> compiles the samples source code"/>
    <echo message="   compile.tests   --> compiles the tests source code"/>
    <echo message="   docs            --> generates the HTML documentation"/>
    <echo message="   javadocs        --> generates the API documentation (needs Java 1.2 or higher)"/>
    <echo message="   test            --> runs the defined JUnit tests"/>
    <echo message="   clean           --> cleans up all generated files and directories"/>
    <echo message="   usage           --> provides help on using the build tool (default)"/>
    <echo message="   jar             --> creates the JAR file"/>
    <echo message=""/>
    <echo message=" See comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <target name="init">
    <echo message= "---------------- ${Name} ${version} [${year}] ---------------"/>
  </target>


    <property name="Name" value="Apache-XML-Security"/>
    <property name="version" value="0.0.1"/>
    <property name="appendit" value="2_0_0_beta2"/>
    <property name="year" value="1999-2001"/>
    <property name="copyright" value="Copyright &#169; ${year} Apache XML Project. All Rights Reserved."/>

    <!--
    <property name="build.compiler" value="classic"/>
    -->
    <property name="build.compiler" value="jikes" />

    <property name="src" value="src" />
    <property name="src.samples" value="src_samples" />
    <property name="src.unitTests" value="src_unitTests" />

    <property name="build" value="./classes" />
    <property name="build.jar" value="./xmlsec.jar" />

    <property name="cvs.server" value="cvs.apache.org" />
    <property name="cvs.path" value="/home/cvs" />
    <property name="cvs.package" value="xml-security" />

    <property name="cvs.user.developer" value="geuerp" />
    <property name="cvs.user.anonymous" value="anonymous" />
    <property name="cvs.cvsRoot.developer" value=":ext:${cvs.user.developer}@${cvs.server}:${cvs.path}" />
    <property name="cvs.cvsRoot.anonymous" value=":pserver:${cvs.user.anonymous}@${cvs.server}:${cvs.path}" />

    <property name="libs"         value="libs" />
    <property name="lib.xerces"   value="${libs}/xerces-1_4_4.jar" />
    <property name="lib.xalan.1"  value="${libs}/xalan-j_2_2_D13_xalan.jar" />
    <property name="lib.xalan.2"  value="${libs}/xalan-j_2_2_D13_xml-apis.jar" />
    <property name="lib.log4j"    value="${libs}/jakarta-log4j-1.2alpha5.jar" />
    <property name="lib.junit"    value="${libs}/junit3.7.jar" />

    <property name="jce.download.file" value="jce-jdk13-111.jar" />
    <property name="jce.download" value="http://www.bouncycastle.org/download/${jce.download.file}" />
    <property name="lib.jce"      value="${libs}/bc-${jce.download.file}" />

    <property name="doc" value="./doc" />
    <property name="doc.html" value="${doc}/html" />
    <property name="doc.pdf" value="${doc}/pdf" />
    <property name="doc.html.api" value="${doc.html}/api" />
    <property name="javadoc.packages"
              value="
org.apache.xml.security.Init,
org.apache.xml.security.algorithms.*,
org.apache.xml.security.c14n.*,
org.apache.xml.security.c14n.helper.*,
org.apache.xml.security.c14n.implementations.*,
org.apache.xml.security.exceptions.*,
org.apache.xml.security.interfaces.*,
org.apache.xml.security.keys.*,
org.apache.xml.security.keys.content.*,
org.apache.xml.security.keys.content.keyvalues.*,
org.apache.xml.security.keys.content.x509.*,
org.apache.xml.security.keys.keyresolver.*,
org.apache.xml.security.keys.keyresolver.implementations.*,
org.apache.xml.security.keys.storage.*,
org.apache.xml.security.keys.storage.implementations.*,
org.apache.xml.security.signature.*,
org.apache.xml.security.transforms.*,
org.apache.xml.security.transforms.implementations.*,
org.apache.xml.security.utils.*
" />

    <path id="classpath.library">
      <pathelement path="${build}" />
      <pathelement path="${lib.xerces}" />
      <pathelement path="${lib.xalan.1}" />
      <pathelement path="${lib.xalan.2}" />
      <pathelement path="${lib.log4j}" />
      <pathelement path="${lib.jce}" />
    </path>

    <path id="classpath.test">
      <!-- classpath for test is librarypath plus log4j -->
      <path refid="classpath.library" />
      <pathelement path="${lib.junit}" />
    </path>

  <target name="prepare" depends="init">
    <tstamp />
    <mkdir dir="${build}" />
    <!-- check whether JUnit is available -->
    <available property="junit.present" classname="junit.framework.TestCase">
       <classpath refid="classpath.test" />
    </available>

    <available property="bcprov.present"
               classname="org.bouncycastle.asn1.DERInputStream">
       <classpath refid="classpath.library" />
    </available>
  </target>

  <target name="get-jce"
          depends="prepare"
          unless="bcprov.present">
    <get src="${jce.download}"
	 dest="${lib.jce}"
	 verbose="true"
	 usetimestamp="true"/>
  </target>

  <target name="compile.library" depends="prepare, get-jce">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}">
      <classpath refid="classpath.library" />
    </javac>
    <!-- Copy Property files -->
    <copy todir="${build}" >
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="**/*.xml"/>
      <fileset dir="${src}" includes="**/*.zip"/>
    </copy>
  </target>

  <target name="compile.tests"
          depends="compile.library"
          if="junit.present">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src.unitTests}" destdir="${build}">
      <classpath refid="classpath.test" />
    </javac>
    <!-- Copy Property files -->
    <copy todir="${build}" >
      <fileset dir="${src.unitTests}" includes="**/*.properties"/>
      <fileset dir="${src.unitTests}" includes="**/*.xml"/>
      <fileset dir="${src.unitTests}" includes="**/*.zip"/>
    </copy>
  </target>

  <target name="compile.samples"
          depends="compile.library">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src.samples}"
           destdir="${build}">
      <classpath refid="classpath.library" />
    </javac>
    <!-- Copy Property files -->
    <copy todir="${build}" >
      <fileset dir="${src.samples}" includes="**/*.properties"/>
      <fileset dir="${src.samples}" includes="**/*.xml"/>
      <fileset dir="${src.samples}" includes="**/*.zip"/>
    </copy>
  </target>

  <target name="compile"
          depends="compile.library, compile.samples, compile.tests"
          description="compile everything" />

  <target name="test"
          depends="init, compile.tests"
          if="junit.present"
          description="Starts all JUnit test cases">
     <java classname="junit.textui.TestRunner"
           fork="yes"
           taskname="junit"
           failonerror="true">
        <arg value="org.apache.xml.security.test.AllTests"/>
        <classpath refid="classpath.test" />
     </java>
  </target>

  <target name="clean"
          description="Clean up all temporary build files">
    <delete dir="${build}" />
    <delete file="${build.jar}" />
    <delete dir="bak" />
    <delete dir="{$doc.html.api}" />
    <delete file="log.txt" />
  </target>

  <target name="javadocs"
          depends="compile"
          description="generates javadoc from all .java files">
    <mkdir dir="${doc.html.api}"/>
    <javadoc sourcepath="${src}"
             destdir="${doc.html.api}"
             packagenames="${javadoc.packages}"
             classpathref="classpath.test"/>
  </target>

  <target name="jar"
          depends="compile"
          description="Creates the ${build.jar} JAR file">
     <jar jarfile="${build.jar}"
          basedir="${build}"
          compress="false"
          includes="org/apache/**,META-INF/**"
          excludes="org/apache/xml/security/temp/**" />
  </target>

  <target name="gump"
          description="Target for the gump run"
          depends="clean,jar,test" />

  <target name="generate-keys">
     <genkey alias="test2"
             keyalg="DSA"
             keypass="xmlsecurity"
             storepass="xmlsecurity"
             keystore="data/keystoreAnt.jks"
             validity="2000" >
       <dname>
         <param name="CN" value="Christian Geuer-Pollmann"/>
         <param name="OU" value="FB12NUE"/>
         <param name="O"  value="University of Siegen"/>
         <param name="C"  value="DE"/>
      </dname>
    </genkey>
  </target>

  <target name="sign"
          description="creates a signature"
          depends="compile">
     <delete file="signature.xml" />
     <java classname="org.apache.xml.security.samples.signature.CreateSignature"
           fork="yes"
           taskname="CreateSignature"
           failonerror="true">
        <classpath refid="classpath.test" />
     </java>
  </target>

  <target name="verify"
          description="verifies a signature"
          depends="compile">
     <java classname="org.apache.xml.security.samples.signature.VerifySignature"
           fork="yes"
           taskname="VerifySignature"
           failonerror="true">
        <classpath refid="classpath.test" />
     </java>
  </target>

  <target name="signAndVerify"
          description="creates and verifies a signature"
          depends="sign, verify" />

  <property name="tools.dir" value="./tools"/>
  <property name="doc.xml" value="${doc}/xml"/>
  <property name="doc.html" value="${doc}/html"/>
  <property name="doc.book" value="${doc.xml}/docs-book.xml"/>
  <property name="doc.style" value="${doc.xml}/style-apachexml"/>
  <property name="doc.style.jar" value="${tools.dir}/style-apachexml.jar"/>
  <property name="doc.generator" value="org.apache.stylebook.StyleBook"/>
  <property name="doc.generator.package" value="${tools.dir}/stylebook-1.0-b2.jar"/>

  <target name="docs">
    <mkdir dir="${doc.html}"/>
    <unjar src="${doc.style.jar}" dest="${doc.style}"/>
    <java fork="yes"
          classname="${doc.generator}">
        <arg value="targetDirectory=${doc.html}"/>
        <arg value="${doc.book}"/>
        <arg value="${doc.style}"/>
        <classpath>
           <pathelement path="${doc.generator.package}" />
           <pathelement path="${tools.dir}/xerces.jar" />
           <pathelement path="${tools.dir}/xalan.jar" />
        </classpath>
    </java>
    <delete dir="${doc.style}"/>
  </target>

  <target name="mega-sample" depends="compile.samples">
    <echo message="Now I'll try to verify merlins example fifteen-HMAC"/>
    <java classname="org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
          fork="yes">
        <classpath refid="classpath.library" />
    </java>

    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message="Now I'll try to verify merlins example sixteen"/>
    <java classname="org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
          fork="yes">
        <classpath refid="classpath.library" />
    </java>

    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message="Now I'll create a signature in signature.xml and verify it"/>
    <java classname="org.apache.xml.security.samples.signature.CreateSignature"
          fork="yes">
        <classpath refid="classpath.library" />
    </java>
    <java classname="org.apache.xml.security.samples.signature.VerifySignature"
          fork="yes">
        <classpath refid="classpath.library" />
    </java>

    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message=""/>
    <echo message="Now I'll create a signature like merlin-16 but without XSLT"/>
    <java classname="org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
          fork="yes">
        <classpath refid="classpath.library" />
    </java>

    <echo message=""/>
    <echo message=""/>
    <echo message="Please look into log.txt, merlinsSixteenRecreated.xml and signature.xml"/>
  </target>


  <property name="lib.doclet.mif" value="${tools.dir}/mifdoclet.jar" />
  <path id="classpath.doclet.mif">
    <path refid="classpath.library" />
    <pathelement path="${lib.doclet.mif}"/>
  </path>
  <target name="javadoc-pdf"
          description="Generates javadoc in Adobe MakerInterchangeFormat (.mif) from all .java files">
    <mkdir dir="${doc.pdf}"/>
    <javadoc sourcepath="${src}"
             destdir="${doc.pdf}"
             packagenames="${javadoc.packages}"
             doclet="com.sun.tools.doclets.mif.MIFDoclet"
             docletpath="${lib.doclet.mif}"
             additionalparam="-book data/websigMiflet.xml -batch dzbatcher -print pdf"
             classpathref="classpath.doclet.mif" />
  </target>

  <target name="createEnvelopingSignature" depends="compile.samples">
    <java classname="org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
          fork="yes">
        <classpath refid="classpath.library" />
    </java>
  </target>
</project>