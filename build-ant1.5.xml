<?xml version="1.0"?>
<project name="Apache XML Security" default="help" basedir=".">
    <!-- P R O P E R T Y    F I L E S -->
    <property file="build.properties" />
    <property file="provider.properties" />
    <property file="proxy.properties" />




    <!-- G L O B A L    P R O P E R T I E S -->
    <!-- directory properties -->
    <property name="dir.src"            value="${basedir}/src" />
    <property name="dir.src.test"       value="${basedir}/src_unitTests" />
    <property name="dir.src.samples"    value="${basedir}/src_samples" />
    <property name="dir.libs"           value="${basedir}/libs" />
    <property name="dir.data"           value="${basedir}/data" />
    <property name="dir.build"          value="${basedir}/build" />
    <property name="dir.build.bin"      value="${dir.build}/classes" />
    <property name="dir.build.libs"     value="${dir.build}/libs" />
    <property name="dir.build.test"     value="${dir.build}/test" />
    <property name="dir.build.docs"     value="${dir.build}/docs" />
    <property name="dir.build.docs.xml" value="${dir.build.docs}/xml" />
    <property name="dir.build.docs.html" value="${dir.build.docs}/html" />
    <property name="dir.build.src"      value="${dir.build}/src" />
    <property name="dir.build.dist"     value="${dir.build}/dist" />
    <property name="dir.build.junit.xml"  value="${dir.build.docs.xml}/junit" />
    <property name="dir.build.junit.html" value="${dir.build.docs.html}/junit" />
    <property name="dir.build.javadoc"    value="${dir.build.docs.html}/javadoc" />

    <!-- library properties -->
    <property name="lib.logging"        value="${dir.libs}/commons-logging.jar" />
    <property name="lib.logging.api"    value="${dir.libs}/commons-logging-api.jar" />
    <property name="lib.xalan.1"        value="${dir.libs}/xalan.jar" />
    <property name="lib.xalan.2"        value="${dir.libs}/xml-apis.jar" />
    <property name="lib.xerces.1"       value="${dir.libs}/xercesImpl.jar" />
    <property name="lib.xerces.2"       value="${dir.libs}/xmlParserAPIs.jar" />
    <property name="lib.jce"            value="${dir.libs}/${jce.provider.prefix}-${jce.provider.jar}" />
    <property name="lib.style"          value="${dir.libs}/style-apachexml.jar" />
    <property name="lib.stylebook"      value="${dir.libs}/stylebook-1.0-b3_xalan-2.jar" />
    <!--property name="lib.junit"			value="${ant.home}/lib/junit.jar" /-->
    
    <!-- javadoc properties -->
    <property name="javadoc.packages" value=" org.apache.xml.security.Init, org.apache.xml.security.algorithms, org.apache.xml.security.c14n, org.apache.xml.security.encryption, org.apache.xml.security.exceptions, org.apache.xml.security.keys, org.apache.xml.security.keys.content, org.apache.xml.security.keys.content.keyvalues, org.apache.xml.security.keys.content.x509, org.apache.xml.security.keys.keyresolver, org.apache.xml.security.keys.storage, org.apache.xml.security.signature, org.apache.xml.security.transforms, org.apache.xml.security.transforms.params, org.apache.xml.security.utils, org.apache.xml.security.utils.resolver "/>

    <!-- build variable properties -->




    <!-- C O N D I T I O N A L    P R O P E R T I E S -->
    <target name="do.build.src" >
        <!-- global properties applies here -->
    </target >




    <!-- P A T H S -->
    <path id="id.classpath.xalan" >
        <pathelement path="${lib.xalan.1}" />
        <pathelement path="${lib.xalan.2}" />
    </path >
    <path id="id.classpath.xerces" >
        <pathelement path="${lib.xerces.1}" />
        <pathelement path="${lib.xerces.2}" />
    </path >
    <path id="id.classpath.logging" >
        <pathelement path="${lib.logging}" />
        <pathelement path="${lib.logging.api}" />
    </path >
    <path id="id.classpath.common" >
        <path refid="id.classpath.xalan" />
        <path refid="id.classpath.xerces" />
        <path refid="id.classpath.logging" />
    </path >
    <path id="id.classpath.crypt" >
        <pathelement path="${lib.jce}" />
    </path >
    <path id="id.classpath.sig" >
    </path >
    <path id="id.classpath" >
        <path refid="id.classpath.common" />
        <path refid="id.classpath.crypt" />
        <path refid="id.classpath.sig" />
    </path >
    <path id="id.classpath.test" >
        <path refid="id.classpath" />
        <pathelement path="${dir.build.bin}"/>
        <!--pathelement path="${lib.junit}"/ -->
        <pathelement path="${dir.build.test}"/>
    </path >




    <!-- T A R G E T S -->
    <!-- environment targets -->
    <!-- set up -->
    <target name="env.mk.dirs" unless="has.dirs" >
        <mkdir dir="${dir.build}" />
        <mkdir dir="${dir.build.bin}" />
        <mkdir dir="${dir.build.docs}" />
        <mkdir dir="${dir.build.test}" />
        <mkdir dir="${dir.build.libs}" />
        <mkdir dir="${dir.build.dist}" />
        <property name="has.dirs" value="true" />
    </target >

    <!-- tear down -->
    <target name="env.rm.dirs" >
        <delete dir="${dir.build}" />
    </target >

    <!-- check targets -->
    <target name="do.check.libs.jce" >
        <condition property="has.jce.provider" >
            <available file="${lib.jce}" />
        </condition >
    </target >
    <target name="do.check.libs"
            depends="do.check.libs.jce"
            unless="has.jce.provider" >
        <setproxy proxyhost="${proxy.host}"
                  proxyport="${proxy.port}" />
        <get src="${jce.provider.source}/${jce.provider.jar}"
             dest="${lib.jce}"
             verbose="true" />
        <checksum file="${lib.jce}"
                  algorithm="${checksum.algorithm}"
                  property="${checksum.value}"
                  verifyproperty="jce.checksum.ok" />
    </target >

    <!-- build targets -->
    <!-- source -->
    <target name="build.src"
            depends="do.check.libs,do.build.src,env.mk.dirs"
            if="has.jce.provider" >
        <javac srcdir="${dir.src}"
               destdir="${dir.build.bin}" >
            <classpath refid="id.classpath" />
            <include name="**/org/apache/xml/security/**/*.java" />
        </javac >
        <copy todir="${dir.build.bin}" >
            <fileset dir="${dir.src}"
                     includes="**/org/apache/xml/security/resource/*,
                               **/org/apache/xml/security/resource/schema/*"
                     excludes="**/org/apache/xml/security/resource/CVS,
                               **/org/apache/xml/security/resource/schema/CVS" />
        </copy >
    </target >
    
    <!-- tests -->
    <target name="build.test"
    		depends="build.src">
    	<javac srcdir="${dir.src.test}"
               destdir="${dir.build.test}">
        	<classpath refid="id.classpath.test" />
        	<include name="**/org/apache/xml/security/**/*.java" />
        </javac>
        <copy todir="${dir.build.test}">
	      	<fileset dir="${dir.src.test}" includes="**/*.properties"/>
      		<fileset dir="${dir.src.test}" includes="**/*.xml"/>
      		<fileset dir="${dir.src.test}" includes="**/*.zip"/>
    	</copy>
    </target>
  
	<!-- test targets -->  
	<!-- big test -->
	<target name="test"
			depends="build.test"
			description="Starts all Junit tests">
	    <delete dir="${dir.build.junit.xml}"/>
	    <delete dir="${dir.build.junit.html}"/>
	    <mkdir dir="${dir.build.junit.xml}"/>
	    <mkdir dir="${dir.build.junit.html}"/>
	    <!-- The unit tests include so-called interoperability tests against
	         cryptographic values generated using software from other vendors.
	         This package includes many of these vectors, but not the ones from
	         the IBM alphaWorks XML Security Suite. They are not included because
	         IBM even has these signatures under copyright.
	         If you want to test against IBM, download xss4j from
	
	         http://www.alphaworks.ibm.com/tech/xmlsecuritysuite
	
	         and put the files into the
	
	         data/com/ibm/xss4j-20030127/
	
	         directory. If the file enveloped-rsa.sig is found in that directory,
	         IBM is 'magically' included in the test ;-))
	    -->
	    <available file="data/com/ibm/xss4j-20030127/enveloped-rsa.sig" property="ibm.available"/>
	    <junit filtertrace="true" fork="true" printsummary="on" failureproperty="build.test.failed">
	       <jvmarg value="-Djava.compiler=NONE"/>
	       <sysproperty key="basedir" value="${basedir}"/>
	       <classpath refid="id.classpath.test"/>
	       <formatter type="xml"/>
	       <!-- Also put output to screen -->
	       <formatter type="plain" usefile="false"/>
	       <batchtest fork="yes" todir="${dir.build.junit.xml}">
	         <fileset dir="${dir.src.test}">
	           <include name="**/*Test*.java"/>
	           <include name="org/apache/xml/security/test/c14n/implementations/ExclusiveC14NInterop.java"/>
	           <exclude name="org/apache/xml/security/test/*Test*.java"/>
	           <exclude name="org/apache/xml/security/test/interop/InteropTest.java"/>
	           <exclude name="**/TestVectorResolver.java"/>
	           <exclude name="**/IBMTest.java"/>
	         </fileset>
	       </batchtest>
	       <test if="ibm.available" name="org.apache.xml.security.test.interop.IBMTest" todir="${dir.build.junit.xml}"/>
	    </junit>
	    <junitreport todir="${dir.build.junit.xml}">
	      <fileset dir="${dir.build.junit.xml}">
	        <include name="TEST-*.xml"/>
	      </fileset>
	      <report format="frames" todir="${dir.build.junit.html}"/>
	    </junitreport>
	    <fail if="build.test.failed" message="Unit Tests Failed"/>
	</target>
  
    <target name="test_exc_c14n"
    		depends="build.test"
    		description="Runs exclusive c14n interop (Y1, Y2, Y3, Y4)">
       	<java classname="org.apache.xml.security.test.c14n.implementations.ExclusiveC14NInterop" failonerror="true" fork="yes" taskname="junit">
          	<classpath refid="classpath.test"/>
       	</java>
    </target>

    <target name="test_xenc"
    		depends="build.test"
    		description="Runs encryption interop and unit tests">
       <java classname="org.apache.xml.security.test.EncryptionTest" failonerror="true" fork="yes" taskname="junit">
          <classpath refid="classpath.test"/>
       </java>
    </target>

    <!-- documentation -->
    <target name="build.docs">
		<mkdir dir="${dir.build.javadoc}"/>
		<javadoc classpathref="id.classpath"
				 destdir="${dir.build.javadoc}"
				 packagenames="${javadoc.packages}">
        	<sourcepath>
          		<pathelement location="${dir.src}"/>
	        </sourcepath>
    	</javadoc>
    </target>    

    <!-- jars -->
    <target name="build.jar"
            depends="env.mk.dirs" >
        <jar destfile="${dir.build.dist}/xml-security.jar"
             basedir="${dir.build.bin}" >
        </jar >
    </target >

    <!-- archive targets -->
    <target name="build.arch"
            depends="env.mk.dirs" >
    </target >

    <!-- aliases -->
    <target name="build.all"        depends="env.mk.dirs,build.src,build.docs,build.jar,build.arch" />

    <target name="compile"          depends="build.src" />
    <target name="docs"             depends="build.docs" />
    <target name="jar"              depends="build.jar" />
    <target name="dist"             depends="build.dist" />
    <target name="clean"            depends="env.rm.dirs"/>
    <target name="gump"				depends="clean, docs, test"/>

    <!-- distribution targets -->
    <target name="build.dist"       depends="build.all" />

    <!-- maintenance targets -->

    <!-- help targets -->
    <target name="help" >
        <echo message="synopsis: ant [target]" />
        <echo message="targets:" />
        <echo message="compile  - builds xml-security source" />
        <echo message="docs     - creates java documentation" />
        <echo message="jar      - creates a jar file, containing the built source" />
        <echo message="dist     - creates a distribution" />
        <echo message="           (see ant help.dist for more information)" />
        <echo message="clean    - resets the build environment" />
        <echo message="test     - performs a series of tests" />
        <echo message="           (see ant help.test for more information)" />
        <echo message="help     - displays this help message (default)" />
        <echo message="config   - optional configuration information" />
        <echo message="           (see ant help.config for more information)" />
    </target >
    <target name="help.dist" >
        <echo message="dist:" />
        <echo message="this target will:" />
        <echo message="1.  build the source files," />
        <echo message="2.  create the appropriate java documentation," />
        <echo message="3.  create distribution jars," />
        <echo message="4.  copy the license, copies source and" />
        <echo message="5.  creates distribution archives" />
    </target >
    <target name="help.test" >
        <echo message="To be done..." />
    </target >
    <target name="help.config" >
        <echo message="1.  to configure the provider setings," />
        <echo message="    see the contents of provider.properties" />
        <echo message="2.  to configure the proxy setings," />
        <echo message="    see the contents of proxy.properties" />
    </target >
</project>
